#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/udp.h>
#include <linux/if_ether.h>
#include <linux/inet.h>


static struct nf_hook_ops hook1; 


int count0=0, count1=0;

unsigned int blockSYN(void *priv, struct sk_buff *skb,
                       const struct nf_hook_state *state)
{
   struct iphdr *iph;
   struct tcphdr *tcph;

   u16  port   = 23;
   char ip0[16] = "10.9.0.1";
   char ip1[16] = "10.9.0.5";

   u32  ip_addr0, ip_addr1;

   if (!skb) return NF_ACCEPT;

   iph = ip_hdr(skb);
   // Convert the IPv4 address from dotted decimal to 32-bit binary
   in4_pton(ip0, -1, (u8 *)&ip_addr0, '\0', NULL);
   in4_pton(ip1, -1, (u8 *)&ip_addr1, '\0', NULL);

   if (iph->protocol == IPPROTO_TCP) {
       tcph = tcp_hdr(skb);
       if ((iph->saddr == ip_addr0 || iph->saddr == ip_addr1) && ntohs(tcph->dest) != port){
            printk(KERN_WARNING "*** Dropping Any Packet other than Telnet");
            return NF_DROP;
        }

        if(tcph->syn){
            if(iph->saddr == ip_addr0){
                if(count0 == 3){
                    printk(KERN_WARNING "*** Dropping as more than 3 telnet connection from this source is present.");
                    return NF_DROP;
                }
                count0++;
            }
            if(iph->saddr == ip_addr1){
                if(count1 == 3){
                    printk(KERN_WARNING "*** Dropping as more than 3 telnet connection from this source is present.");
                    return NF_DROP;
                }
                count1++;
            }
        }
   }
   return NF_ACCEPT;
}


int registerFilter(void) {
   printk(KERN_INFO "Registering filters.\n");

   hook1.hook = blockSYN;
   hook1.hooknum = NF_INET_FORWARD;
   hook1.pf = PF_INET;
   hook1.priority = NF_IP_PRI_FIRST;
   nf_register_net_hook(&init_net, &hook1);

   return 0;
}

void removeFilter(void) {
   printk(KERN_INFO "The filters are being removed.\n");
   nf_unregister_net_hook(&init_net, &hook1);
}

module_init(registerFilter);
module_exit(removeFilter);

MODULE_LICENSE("GPL");
